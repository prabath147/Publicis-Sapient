pipeline {
	agent any
	environment {
		AWS_ACCOUNT_ID="832215930943"
		AWS_DEFAULT_REGION="us-east-1"
		IMAGE_REPO_NAME="notify-service"
		IMAGE_TAG="latest"
		REPOSITORY_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}"
		LINK="https://tools.publicis.sapient.com/bitbucket/scm/psijun/notify-service.git"
		SONAR_LINK="PSIJUN_notify-service_AYKwcTyWKxR5J3g35rbJ"
	}
	tools{
		//in global tool configuration name - Maven
		maven 'Maven'
	}

	stages {

		stage("Clone Code from Repository"){
			steps{
				bbs_checkout branches: [[name: '*/master']], credentialsId: 'bitbucket_admin', id: 'be8cf374-eaf6-49a4-beb4-c96de38f0a08', projectName: 'PSI-2022 June ASDE Batch 3', repositoryName: 'notify-service', serverId: '9d049c85-48b6-452e-8478-7519760f9383'
			}
		}

		stage("Code coverage") {
			steps {
				sh 'mvn clean verify'
				jacoco buildOverBuild: true, runAlways: true, exclusionPattern: '*/AdminServiceApplication.class, */dto/*, */configuration/*, */model/*, */utils/*, */repository/*, */service/*'
			}
		}
		

		stage("Create JAR File"){
			steps{
				sh "mvn package -DskipTests"
			}
		}

		stage ("archive") {
			steps{
				archiveArtifacts "**/*.jar"
			}
		}

		stage("SonarQube Analysis"){
			steps{
				withSonarQubeEnv('sonarqube-server'){
					sh "mvn sonar:sonar -Dsonar.projectKey=${SONAR_LINK}"
				}
			}
		}

		stage("SonarQube Quality Check"){
			steps{
				timeout(time:3, unit:'MINUTES'){
					waitForQualityGate abortPipeline: true, credentialsId: 'sonarqube_token'
				}
			}
		}

		// Building Docker images
		stage("Building image") {
			steps{
				script {
					dockerImage = docker.build "${IMAGE_REPO_NAME}:${IMAGE_TAG}"
				}
			}
		}

		// login to ECR
		stage('Logging into AWS ECR') {
			steps {
				script {
					sh "aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
				}
			}
		}

		// Uploading Docker images into AWS ECR
		stage('Pushing to ECR') {
			steps{
				script {
					sh "docker tag ${IMAGE_REPO_NAME}:${IMAGE_TAG} ${REPOSITORY_URI}:${IMAGE_TAG}"
					sh "docker push ${REPOSITORY_URI}:${IMAGE_TAG}"
				}
			}
		}

		// Deploy image to EKS
		stage("K8S Deploy"){
		    steps{
				withKubeConfig([redentialsId: 'K8S') {
		            sh "kubectl apply -f eks-deploy-k8s.yaml"
		        }
		    }
		}
	}
	post {
		always {
			echo 'One way or another, I have finished'
			deleteDir() /* clean up our workspace */
		}
		success {
			echo 'I succeeded!'
		}
		unstable {
			echo 'I am unstable :/'
		}
		failure {
			echo 'I failed :('
		}
		changed {
			echo 'Things were different before...'
		}
	}
}
